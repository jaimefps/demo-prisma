generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  BASIC
  PREMIUM
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  type     AccountType @default(BASIC)
  verified Boolean     @default(false)
  username String?     @unique
  email    String      @unique

  categories CategoriesOnUsers[]
  attendance UsersInEvents[]
  badges     BadgesOnUsers[]
  events     Event[]
}

model Event {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name   String
  desc   String?
  lat    Float
  lng    Float
  start  DateTime
  end    DateTime?
  hostId String

  host       User                 @relation(fields: [hostId], references: [id], onDelete: Cascade)
  attendance UsersInEvents[]
  categories CategoriesOnEvents[]
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name String
  desc String

  userAttributions  CategoriesOnUsers[]
  eventAttributions CategoriesOnEvents[]
}

model Badge {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name String
  desc String

  attributions BadgesOnUsers[]
}

model CategoriesOnEvents {
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  createdAt DateTime @default(now())
  @@id([eventId, categoryId])
}

model CategoriesOnUsers {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  createdAt DateTime @default(now())
  @@id([userId, categoryId])
}

model BadgesOnUsers {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  badgeId String

  createdAt DateTime @default(now())
  @@id([userId, badgeId])
}

model UsersInEvents {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  createdAt DateTime @default(now())
  @@id([userId, eventId])
}
